<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Custom Stream Application Samples</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch02s03.xhtml" title="GemFire Samples"/><link rel="next" href="ch03.xhtml" title="Chapter 3. Task / Batch"/></head><body><header/><section class="section" title="Custom Stream Application Samples" epub:type="subchapter" id="spring-cloud-data-flow-samples-custom-apps-overview"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Custom Stream Application Samples</h2></div></div></div><section class="section" title="Custom Spring Cloud Stream Processor" epub:type="division" id="spring-cloud-data-flow-samples-custom-application-overview"><div class="titlepage"><div><div><h3 class="title">Custom Spring Cloud Stream Processor</h3></div></div></div><section class="section" title="Prerequisites" epub:type="division" id="_prerequisites_6"><div class="titlepage"><div><div><h4 class="title">Prerequisites</h4></div></div></div><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">A Running Data Flow Shell</li></ul></div><p>The Spring Cloud Data Flow Shell is available for <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started-deploying-spring-cloud-dataflow" target="_top">download</a> or you can <a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow" target="_top">build</a> it yourself.</p><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>the Spring Cloud Data Flow Shell and Local server implementation are in the same repository and are both built by running <code class="literal">./mvnw install</code> from the project root directory. If you have already run the build, use the jar in <code class="literal">spring-cloud-dataflow-shell/target</code></p></td></tr></table></div><p>To run the Shell open a new terminal session:</p><pre class="screen">$ cd &lt;PATH/TO/SPRING-CLOUD-DATAFLOW-SHELL-JAR&gt;
$ java -jar spring-cloud-dataflow-shell-&lt;VERSION&gt;.jar
  ____                              ____ _                __
 / ___| _ __  _ __(_)_ __   __ _   / ___| | ___  _   _  __| |
 \___ \| '_ \| '__| | '_ \ / _` | | |   | |/ _ \| | | |/ _` |
  ___) | |_) | |  | | | | | (_| | | |___| | (_) | |_| | (_| |
 |____/| .__/|_|  |_|_| |_|\__, |  \____|_|\___/ \__,_|\__,_|
  ____ |_|    _          __|___/                 __________
 |  _ \  __ _| |_ __ _  |  ___| | _____      __  \ \ \ \ \ \
 | | | |/ _` | __/ _` | | |_  | |/ _ \ \ /\ / /   \ \ \ \ \ \
 | |_| | (_| | || (_| | |  _| | | (_) \ V  V /    / / / / / /
 |____/ \__,_|\__\__,_| |_|   |_|\___/ \_/\_/    /_/_/_/_/_/


Welcome to the Spring Cloud Data Flow shell. For assistance hit TAB or type "help".
dataflow:&gt;</pre><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>The Spring Cloud Data Flow Shell is a Spring Boot application that connects to the Data Flow Server’s REST API and supports a DSL that simplifies the process of defining a stream or task and managing its lifecycle. Most of these samples
use the shell. If you prefer, you can use the Data Flow UI <a class="link" href="http://localhost:9393/dashboard" target="_top">localhost:9393/dashboard</a>, (or wherever it the server is hosted) to perform the same operations.</p></td></tr></table></div><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">A running local Data Flow Server</li></ul></div><p>The Local Data Flow Server is Spring Boot application available for <a class="link" href="http://cloud.spring.io/spring-cloud-dataflow/" target="_top">download</a> or you can <a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow" target="_top">build</a> it yourself.
If you build it yourself, the executable jar will be in <code class="literal">spring-cloud-dataflow-server-local/target</code></p><p>To run the Local Data Flow server Open a new terminal session:</p><pre class="screen">$cd  &lt;PATH/TO/SPRING-CLOUD-DATAFLOW-LOCAL-JAR&gt;
$java -jar spring-cloud-dataflow-server-local-&lt;VERSION&gt;.jar</pre><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">A Java IDE</li><li class="listitem" epub:type="list-item"><a class="link" href="https://maven.apache.org/" target="_top">Maven</a> Installed</li><li class="listitem" epub:type="list-item">A running instance of <a class="link" href="https://www.rabbitmq.com/" target="_top">Rabbit MQ</a></li></ul></div></section><section class="section" title="Create the custom stream app" epub:type="division" id="_create_the_custom_stream_app"><div class="titlepage"><div><div><h4 class="title">Create the custom stream app</h4></div></div></div><p>We will create a custom <a class="link" href="https://cloud.spring.io/spring-cloud-stream/" target="_top">Spring Cloud Stream</a> application and run it on Spring Cloud Data Flow.
We’ll go through the steps to make a simple processor that converts temperature from Fahrenheit to Celsius.
We will be running the demo locally, but all the steps will work in a Cloud Foundry environment as well.</p><div class="orderedlist" epub:type="list"><ol class="orderedlist" type="1"><li class="listitem" epub:type="list-item"><p class="simpara">Create a new spring cloud stream project</p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">Create a <a class="link" href="http://start.spring.io/" target="_top">Spring initializer</a> project</li><li class="listitem" epub:type="list-item">Set the group to <code class="literal">demo.celsius.converter</code> and the artifact name as <code class="literal">celsius-converter-processor</code></li><li class="listitem" epub:type="list-item">Choose a message transport binding as a dependency for the custom app
There are options for choosing <code class="literal">Rabbit MQ</code> or <code class="literal">Kafka</code> as the message transport.
For this demo, we will use <code class="literal">rabbit</code>. Type <span class="emphasis"><em>rabbit</em></span> in the search bar under <span class="emphasis"><em>Search for dependencies</em></span> and select <code class="literal">Stream Rabbit</code>.</li><li class="listitem" epub:type="list-item">Hit the generate project button and open the new project in an IDE of your choice</li></ul></div></li><li class="listitem" epub:type="list-item"><p class="simpara">Develop the app</p><p class="simpara">We can now create our custom app. Our Spring Cloud Stream application is a Spring Boot application that runs as an executable jar. The application will include two Java classes:</p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><code class="literal">CelsiusConverterProcessorAplication.java</code> - the main Spring Boot application class, generated by Spring initializr</li><li class="listitem" epub:type="list-item"><p class="simpara"><code class="literal">CelsiusConverterProcessorConfiguration.java</code> - the Spring Cloud Stream code that we will write</p><p class="simpara">We are creating a transformer that takes a Fahrenheit input and converts it to Celsius.
Following the same naming convention as the application file, create a new Java class in the same package called <code class="literal">CelsiusConverterProcessorConfiguration.java</code>.</p><p title="CelsiusConverterProcessorConfiguration.java"><span class="formalpara-title">CelsiusConverterProcessorConfiguration.java. </span>
</p><pre class="screen">@EnableBinding(Processor.class)
public class CelsiusConverterProcessorConfiguration {

    @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)
    public int convertToCelsius(String payload) {
        int fahrenheitTemperature = Integer.parseInt(payload);
        return (farenheitTemperature-32)*5/9;
    }
}</pre><p title="CelsiusConverterProcessorConfiguration.java">
</p><p class="simpara">Here we introduced two important Spring annotations.
First we annotated the class with <code class="literal">@EnableBinding(Processor.class)</code>.
Second we created a method and annotated it with <code class="literal">@Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)</code>.
By adding these two annotations we have configured this stream app as a <code class="literal">Processor</code> (as opposed to a <code class="literal">Source</code> or a <code class="literal">Sink</code>).
This means that the application receives input from an upstream application via the <code class="literal">Processor.INPUT</code> channel and sends its output to a downstream application via the <code class="literal">Processor.OUTPUT</code> channel.</p><p class="simpara">The <code class="literal">convertToCelsius</code> method takes a <code class="literal">String</code> as input for Fahrenheit and then returns the converted Celsius as an integer.
This method is very simple, but that is also the beauty of this programming style.
We can add as much logic as we want to this method to enrich this processor.
As long as we annotate it properly and return valid output, it works as a Spring Cloud Stream Processor. Also note that it is straightforward to unit test this code.</p></li></ul></div></li><li class="listitem" epub:type="list-item"><p class="simpara">Build the Spring Boot application with Maven</p><pre class="screen">$cd &lt;PROJECT_DIR&gt;
$./mvnw clean package</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Run the Application standalone</p><pre class="screen">java -jar target/celsius-converter-processor-0.0.1-SNAPSHOT.jar</pre><p class="simpara">If all goes well, we should have a running standalone Spring Boot Application.
Once we verify that the app is started and running without any errors, we can stop it.</p></li></ol></div></section><section class="section" title="Deploy the app to Spring Cloud Data Flow" epub:type="division" id="_deploy_the_app_to_spring_cloud_data_flow"><div class="titlepage"><div><div><h4 class="title">Deploy the app to Spring Cloud Data Flow</h4></div></div></div><div class="orderedlist" epub:type="list"><ol class="orderedlist" type="1"><li class="listitem" epub:type="list-item"><p class="simpara"><a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow/blob/master/spring-cloud-dataflow-docs/src/main/asciidoc/streams.adoc#register-a-stream-app" target="_top">Register</a> the out-of-the-box applications for the Rabbit binder</p><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>These samples assume that the Data Flow Server can access a remote Maven repository, <code class="literal"><a class="link" href="https://repo.spring.io/libs-release" target="_top">repo.spring.io/libs-release</a></code> by default. If your Data Flow server is running behind a firewall, or you are using a maven proxy preventing
access to public repositories, you will need to install the sample apps in your internal Maven repository and <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started-maven-configuration" target="_top">configure</a>
the server accordingly.  The sample applications are typically registered using Data Flow’s bulk import facility. For example, the Shell command <code class="literal">dataflow:&gt;app import --uri <a class="link" href="http://bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven" target="_top">bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven</a></code> (The actual URI is release and binder specific so refer to the sample instructions for the actual URL).
The bulk import URI references a plain text file containing entries for all of the publicly available Spring Cloud Stream and Task applications published to <code class="literal"><a class="link" href="https://repo.spring.io" target="_top">repo.spring.io</a></code>. For example,
<code class="literal">source.http=maven://org.springframework.cloud.stream.app:http-source-rabbit:1.2.0.RELEASE</code> registers the <code class="literal">http</code> source app at the corresponding Maven address, relative to the remote repository(ies) configured for the
Data Flow server. The format is <code class="literal">maven://&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;</code>  You will need to <a class="link" href="https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Bacon.RELEASE/spring-cloud-stream-app-descriptor-Bacon.RELEASE.rabbit-apps-maven-repo-url.properties" target="_top">download</a> the required apps or <a class="link" href="https://github.com/spring-cloud-stream-app-starters" target="_top">build</a> them and then install them in your Maven repository, using whatever group, artifact, and version you choose. If you do
this, register individual apps using <code class="literal">dataflow:&gt;app register…​</code> using the <code class="literal">maven://</code> resource URI format corresponding to your installed app.</p></td></tr></table></div><pre class="screen">dataflow:&gt;app import --uri http://bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Register the custom processor</p><pre class="screen">app register --type processor --name convertToCelsius --uri &lt;File URL of the jar file on the local filesystem where you built the project above&gt; --force</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Create the stream</p><p class="simpara">We will create a stream that uses the out of the box <code class="literal">http</code> source and <code class="literal">log</code> sink and our custom transformer.</p><pre class="screen">dataflow:&gt;stream create --name convertToCelsiusStream --definition "http  --port=9090 | convertToCelsius | log" --deploy

Created and deployed new stream 'convertToCelsiusStream'</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Verify the stream is successfully deployed</p><pre class="screen">dataflow:&gt;stream list</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Verify that the apps have successfully deployed</p><pre class="screen">dataflow:&gt;runtime apps</pre><pre class="screen">2016-09-27 10:03:11.988  INFO 95234 --- [nio-9393-exec-9] o.s.c.d.spi.local.LocalAppDeployer       : deploying app convertToCelsiusStream.log instance 0
   Logs will be in /var/folders/2q/krqwcbhj2d58csmthyq_n1nw0000gp/T/spring-cloud-dataflow-3236898888473815319/convertToCelsiusStream-1474984991968/convertToCelsiusStream.log
2016-09-27 10:03:12.397  INFO 95234 --- [nio-9393-exec-9] o.s.c.d.spi.local.LocalAppDeployer       : deploying app convertToCelsiusStream.convertToCelsius instance 0
   Logs will be in /var/folders/2q/krqwcbhj2d58csmthyq_n1nw0000gp/T/spring-cloud-dataflow-3236898888473815319/convertToCelsiusStream-1474984992392/convertToCelsiusStream.convertToCelsius
2016-09-27 10:03:14.445  INFO 95234 --- [nio-9393-exec-9] o.s.c.d.spi.local.LocalAppDeployer       : deploying app convertToCelsiusStream.http instance 0
   Logs will be in /var/folders/2q/krqwcbhj2d58csmthyq_n1nw0000gp/T/spring-cloud-dataflow-3236898888473815319/convertToCelsiusStream-1474984994440/convertToCelsiusStream.http</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Post sample data to the <code class="literal">http</code> endpoint: <code class="literal"><a class="link" href="http://localhost:9090" target="_top">localhost:9090</a></code> (<code class="literal">9090</code> is the <code class="literal">port</code> we specified for the <code class="literal">http</code> source in this case)</p><pre class="screen">dataflow:&gt;http post --target http://localhost:9090 --data 76
&gt; POST (text/plain;Charset=UTF-8) http://localhost:9090 76
&gt; 202 ACCEPTED</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Open the log file for the <code class="literal">convertToCelsiusStream.log</code> app to see the output of our stream</p><pre class="screen">tail -f /var/folders/2q/krqwcbhj2d58csmthyq_n1nw0000gp/T/spring-cloud-dataflow-7563139704229890655/convertToCelsiusStream-1474990317406/convertToCelsiusStream.log/stdout_0.log</pre><p class="simpara">You should see the temperature you posted converted to Celsius!</p></li></ol></div><pre class="screen">2016-09-27 10:05:34.933  INFO 95616 --- [CelsiusStream-1] log.sink                                 : 24</pre></section><section class="section" title="Summary" epub:type="division" id="_summary_6"><div class="titlepage"><div><div><h4 class="title">Summary</h4></div></div></div><p>In this sample, you have learned:</p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">How to write a custom <code class="literal">Processor</code> stream application</li><li class="listitem" epub:type="list-item">How to use Spring Cloud Data Flow’s <code class="literal">Local</code> server</li><li class="listitem" epub:type="list-item">How to use Spring Cloud Data Flow’s <code class="literal">shell</code> application</li></ul></div></section></section></section><footer/></body></html>