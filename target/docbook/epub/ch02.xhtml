<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Chapter 2. Streaming</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch01.xhtml" title="Chapter 1. Overview"/><link rel="next" href="ch02s02.xhtml" title="JDBC Samples"/></head><body><header/><section class="chapter" title="Chapter 2. Streaming" epub:type="chapter" id="_streaming"><div class="titlepage"><div><div><h1 class="title">Chapter 2. Streaming</h1></div></div></div><section class="section" title="Cassandra Samples" epub:type="subchapter" id="spring-cloud-data-flow-samples-cassandra-overview"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Cassandra Samples</h2></div></div></div><section class="section" title="HTTP to Cassandra Demo" epub:type="division" id="spring-cloud-data-flow-samples-http-cassandra-overview"><div class="titlepage"><div><div><h3 class="title">HTTP to Cassandra Demo</h3></div></div></div><p>In this demonstration, you will learn how to build a data pipeline using <a class="link" href="http://cloud.spring.io/spring-cloud-dataflow/" target="_top">Spring Cloud Data Flow</a> to consume data from an <span class="emphasis"><em>HTTP</em></span> endpoint and write the payload to a <span class="emphasis"><em>Cassandra</em></span> database.</p><p>We will take you through the steps to configure and Spring Cloud Data Flow server in either a <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started/" target="_top">local</a> or <a class="link" href="https://docs.spring.io/spring-cloud-dataflow-server-cloudfoundry/docs/current/reference/htmlsingle/#getting-started" target="_top">Cloud Foundry</a> environment.</p><section class="section" title="Prerequisites" epub:type="division" id="_prerequisites"><div class="titlepage"><div><div><h4 class="title">Prerequisites</h4></div></div></div><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">A Running Data Flow Shell</li></ul></div><p>The Spring Cloud Data Flow Shell is available for <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started-deploying-spring-cloud-dataflow" target="_top">download</a> or you can <a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow" target="_top">build</a> it yourself.</p><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>the Spring Cloud Data Flow Shell and Local server implementation are in the same repository and are both built by running <code class="literal">./mvnw install</code> from the project root directory. If you have already run the build, use the jar in <code class="literal">spring-cloud-dataflow-shell/target</code></p></td></tr></table></div><p>To run the Shell open a new terminal session:</p><pre class="screen">$ cd &lt;PATH/TO/SPRING-CLOUD-DATAFLOW-SHELL-JAR&gt;
$ java -jar spring-cloud-dataflow-shell-&lt;VERSION&gt;.jar
  ____                              ____ _                __
 / ___| _ __  _ __(_)_ __   __ _   / ___| | ___  _   _  __| |
 \___ \| '_ \| '__| | '_ \ / _` | | |   | |/ _ \| | | |/ _` |
  ___) | |_) | |  | | | | | (_| | | |___| | (_) | |_| | (_| |
 |____/| .__/|_|  |_|_| |_|\__, |  \____|_|\___/ \__,_|\__,_|
  ____ |_|    _          __|___/                 __________
 |  _ \  __ _| |_ __ _  |  ___| | _____      __  \ \ \ \ \ \
 | | | |/ _` | __/ _` | | |_  | |/ _ \ \ /\ / /   \ \ \ \ \ \
 | |_| | (_| | || (_| | |  _| | | (_) \ V  V /    / / / / / /
 |____/ \__,_|\__\__,_| |_|   |_|\___/ \_/\_/    /_/_/_/_/_/


Welcome to the Spring Cloud Data Flow shell. For assistance hit TAB or type "help".
dataflow:&gt;</pre><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>The Spring Cloud Data Flow Shell is a Spring Boot application that connects to the Data Flow Server’s REST API and supports a DSL that simplifies the process of defining a stream or task and managing its lifecycle. Most of these samples
use the shell. If you prefer, you can use the Data Flow UI <a class="link" href="http://localhost:9393/dashboard" target="_top">localhost:9393/dashboard</a>, (or wherever it the server is hosted) to perform the same operations.</p></td></tr></table></div></section><section class="section" title="Using the Local Server" epub:type="division" id="http-cassandra-local"><div class="titlepage"><div><div><h4 class="title">Using the Local Server</h4></div></div></div><section class="section" title="Additional Prerequisites" epub:type="division" id="_additional_prerequisites"><div class="titlepage"><div><div><h5 class="title">Additional Prerequisites</h5></div></div></div><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">A running local Data Flow Server</li></ul></div><p>The Local Data Flow Server is Spring Boot application available for <a class="link" href="http://cloud.spring.io/spring-cloud-dataflow/" target="_top">download</a> or you can <a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow" target="_top">build</a> it yourself.
If you build it yourself, the executable jar will be in <code class="literal">spring-cloud-dataflow-server-local/target</code></p><p>To run the Local Data Flow server Open a new terminal session:</p><pre class="screen">$cd  &lt;PATH/TO/SPRING-CLOUD-DATAFLOW-LOCAL-JAR&gt;
$java -jar spring-cloud-dataflow-server-local-&lt;VERSION&gt;.jar</pre><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">Running instance of <a class="link" href="http://kafka.apache.org/downloads.html" target="_top">Kafka</a></li><li class="listitem" epub:type="list-item">Running instance of <a class="link" href="http://cassandra.apache.org/" target="_top">Apache Cassandra</a></li><li class="listitem" epub:type="list-item">A database utility tool such as <a class="link" href="http://dbeaver.jkiss.org/" target="_top">DBeaver</a> to connect to the Cassandra instance. You might have to provide <code class="literal">host</code>, <code class="literal">port</code>, <code class="literal">username</code> and <code class="literal">password</code> depending on the Cassandra configuration you are using.</li><li class="listitem" epub:type="list-item"><p class="simpara">Create a keyspace and a <code class="literal">book</code> table in Cassandra using:</p><pre class="screen">CREATE KEYSPACE clouddata WITH REPLICATION = { 'class' : 'org.apache.cassandra.locator.SimpleStrategy', 'replication_factor': '1' } AND DURABLE_WRITES = true;
USE clouddata;
CREATE TABLE book  (
    id          uuid PRIMARY KEY,
    isbn        text,
    author      text,
    title       text
);</pre><div class="orderedlist" epub:type="list"><ol class="orderedlist" type="1"><li class="listitem" epub:type="list-item"><p class="simpara"><a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow/blob/master/spring-cloud-dataflow-docs/src/main/asciidoc/streams.adoc#register-a-stream-app" target="_top">Register</a> the out-of-the-box applications for the Kafka binder</p><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>These samples assume that the Data Flow Server can access a remote Maven repository, <code class="literal"><a class="link" href="https://repo.spring.io/libs-release" target="_top">repo.spring.io/libs-release</a></code> by default. If your Data Flow server is running behind a firewall, or you are using a maven proxy preventing
access to public repositories, you will need to install the sample apps in your internal Maven repository and <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started-maven-configuration" target="_top">configure</a>
the server accordingly.  The sample applications are typically registered using Data Flow’s bulk import facility. For example, the Shell command <code class="literal">dataflow:&gt;app import --uri <a class="link" href="http://bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven" target="_top">bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven</a></code> (The actual URI is release and binder specific so refer to the sample instructions for the actual URL).
The bulk import URI references a plain text file containing entries for all of the publicly available Spring Cloud Stream and Task applications published to <code class="literal"><a class="link" href="https://repo.spring.io" target="_top">repo.spring.io</a></code>. For example,
<code class="literal">source.http=maven://org.springframework.cloud.stream.app:http-source-rabbit:1.2.0.RELEASE</code> registers the <code class="literal">http</code> source app at the corresponding Maven address, relative to the remote repository(ies) configured for the
Data Flow server. The format is <code class="literal">maven://&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;</code>  You will need to <a class="link" href="https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Bacon.RELEASE/spring-cloud-stream-app-descriptor-Bacon.RELEASE.rabbit-apps-maven-repo-url.properties" target="_top">download</a> the required apps or <a class="link" href="https://github.com/spring-cloud-stream-app-starters" target="_top">build</a> them and then install them in your Maven repository, using whatever group, artifact, and version you choose. If you do
this, register individual apps using <code class="literal">dataflow:&gt;app register…​</code> using the <code class="literal">maven://</code> resource URI format corresponding to your installed app.</p></td></tr></table></div><pre class="screen">dataflow:&gt;app import --uri http://bit.ly/Bacon-RELEASE-stream-applications-kafka-10-maven</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Create the stream</p><pre class="screen">dataflow:&gt;stream create cassandrastream --definition "http --server.port=8888 --spring.cloud.stream.bindings.output.contentType='application/json' | cassandra --ingestQuery='insert into book (id, isbn, title, author) values (uuid(), ?, ?, ?)' --keyspace=clouddata" --deploy

Created and deployed new stream 'cassandrastream'</pre><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>If Cassandra isn’t running on default port on <code class="literal">localhost</code> or if you need username and password to connect, use one of the following options to specify the necessary connection parameters: <code class="literal">--username='&lt;USERNAME&gt;' --password='&lt;PASSWORD&gt;' --port=&lt;PORT&gt; --contact-points=&lt;LIST-OF-HOSTS&gt;</code></p></td></tr></table></div></li><li class="listitem" epub:type="list-item"><p class="simpara">Verify the stream is successfully deployed</p><pre class="screen">dataflow:&gt;stream list</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Notice that <code class="literal">cassandrastream-http</code> and <code class="literal">cassandrastream-cassandra</code> <a class="link" href="https://github.com/spring-cloud-stream-app-starters//" target="_top">Spring Cloud Stream</a> applications are running as Spring Boot applications within the <code class="literal">server</code> as a collocated process.</p><pre class="screen">2015-12-15 15:52:31.576  INFO 18337 --- [nio-9393-exec-1] o.s.c.d.a.s.l.OutOfProcessModuleDeployer : deploying module org.springframework.cloud.stream.module:cassandra-sink:jar:exec:1.0.0.BUILD-SNAPSHOT instance 0
   Logs will be in /var/folders/c3/ctx7_rns6x30tq7rb76wzqwr0000gp/T/spring-cloud-data-flow-284240942697761420/cassandrastream.cassandra
2015-12-15 15:52:31.583  INFO 18337 --- [nio-9393-exec-1] o.s.c.d.a.s.l.OutOfProcessModuleDeployer : deploying module org.springframework.cloud.stream.module:http-source:jar:exec:1.0.0.BUILD-SNAPSHOT instance 0
   Logs will be in /var/folders/c3/ctx7_rns6x30tq7rb76wzqwr0000gp/T/spring-cloud-data-flow-284240942697761420/cassandrastream.http</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Post sample data pointing to the <code class="literal">http</code> endpoint: <code class="literal"><a class="link" href="http://localhost:8888" target="_top">localhost:8888</a></code> (<code class="literal">8888</code> is the <code class="literal">server.port</code> we specified for the <code class="literal">http</code> source in this case)</p><pre class="screen">dataflow:&gt;http post --contentType 'application/json' --data '{"isbn": "1599869772", "title": "The Art of War", "author": "Sun Tzu"}' --target http://localhost:8888
&gt; POST (application/json;charset=UTF-8) http://localhost:8888 {"isbn": "1599869772", "title": "The Art of War", "author": "Sun Tzu"}
&gt; 202 ACCEPTED</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Connect to the Cassandra instance and query the table <code class="literal">clouddata.book</code> to list the persisted records</p><pre class="screen">select * from clouddata.book;</pre></li><li class="listitem" epub:type="list-item">You’re done!</li></ol></div></li></ul></div></section></section><section class="section" title="Using Cloud Foundry Server" epub:type="division" id="http-cassandra-cf"><div class="titlepage"><div><div><h4 class="title">Using Cloud Foundry Server</h4></div></div></div><section class="section" title="Additional Prerequisites" epub:type="division" id="_additional_prerequisites_2"><div class="titlepage"><div><div><h5 class="title">Additional Prerequisites</h5></div></div></div><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">Cloud Foundry instance</li><li class="listitem" epub:type="list-item">The Spring Cloud Data Flow Cloud Foundry Server</li></ul></div><p>The Cloud Foundry Data Flow Server is Spring Boot application available for <a class="link" href="http://cloud.spring.io/spring-cloud-dataflow/" target="_top">download</a> or you can <a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow-server-cloudfoundry" target="_top">build</a> it yourself.
If you build it yourself, the executable jar will be in <code class="literal">spring-cloud-dataflow-server-cloudfoundry/target</code></p><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>Although you can run the Data Flow Cloud Foundry Server locally and configure it to deploy to any Cloud Foundry instance, we will
deploy the server to Cloud Foundry as recommended.</p></td></tr></table></div><div class="orderedlist" epub:type="list"><ol class="orderedlist" type="1"><li class="listitem" epub:type="list-item"><p class="simpara">Verify that CF instance is reachable (Your endpoint urls will be different from what is shown here).</p><pre class="screen">$ cf api
API endpoint: https://api.system.io (API version: ...)

$ cf apps
Getting apps in org [your-org] / space [your-space] as user...
OK

No apps found</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Follow the instructions to deploy the <a class="link" href="https://docs.spring.io/spring-cloud-dataflow-server-cloudfoundry/docs/current/reference/htmlsingle" target="_top">Spring Cloud Data Flow Cloud Foundry server</a>. Don’t worry about creating a Redis service. We won’t need it. If you are familiar with Cloud Foundry
application manifests, we recommend creating a manifest for the the Data Flow server as shown <a class="link" href="https://docs.spring.io/spring-cloud-dataflow-server-cloudfoundry/docs/current/reference/htmlsingle/#sample-manifest-template" target="_top">here</a>.</p><div class="warning" title="Warning" epub:type="warning"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Warning]" src="images/warning.png"/></td><th style="text-align: left; ">Warning</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>As of this writing, there is a typo on the <code class="literal">SPRING_APPLICATION_JSON</code> entry in the sample manifest. <code class="literal">SPRING_APPLICATION_JSON</code> must be followed by <code class="literal">:</code> and The JSON string must be
wrapped in single quotes. Alternatively, you can replace that line with <code class="literal">MAVEN_REMOTE_REPOSITORIES_REPO1_URL: <a class="link" href="https://repo.spring.io/libs-snapshot" target="_top">repo.spring.io/libs-snapshot</a></code>.  If your Cloud Foundry installation is behind a firewall, you may need to install the stream apps used in this sample in your internal Maven repository and <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/1.3.0.M2/reference/htmlsingle/#getting-started-maven-configuration" target="_top">configure</a> the server to access that repository.</p></td></tr></table></div></li><li class="listitem" epub:type="list-item"><p class="simpara">Once you have successfully executed <code class="literal">cf push</code>, verify the dataflow server is running</p><pre class="screen">$ cf apps
Getting apps in org [your-org] / space [your-space] as user...
OK

name                 requested state   instances   memory   disk   urls
dataflow-server      started           1/1         1G       1G     dataflow-server.app.io</pre></li><li class="listitem" epub:type="list-item">Notice that the <code class="literal">dataflow-server</code> application is started and ready for interaction via the url endpoint</li><li class="listitem" epub:type="list-item"><p class="simpara">Connect the <code class="literal">shell</code> with <code class="literal">server</code> running on Cloud Foundry, e.g., <code class="literal"><a class="link" href="http://dataflow-server.app.io" target="_top">dataflow-server.app.io</a></code></p><pre class="screen">$ cd &lt;PATH/TO/SPRING-CLOUD-DATAFLOW-SHELL-JAR&gt;
$ java -jar spring-cloud-dataflow-shell-&lt;VERSION&gt;.jar

  ____                              ____ _                __
 / ___| _ __  _ __(_)_ __   __ _   / ___| | ___  _   _  __| |
 \___ \| '_ \| '__| | '_ \ / _` | | |   | |/ _ \| | | |/ _` |
  ___) | |_) | |  | | | | | (_| | | |___| | (_) | |_| | (_| |
 |____/| .__/|_|  |_|_| |_|\__, |  \____|_|\___/ \__,_|\__,_|
  ____ |_|    _          __|___/                 __________
 |  _ \  __ _| |_ __ _  |  ___| | _____      __  \ \ \ \ \ \
 | | | |/ _` | __/ _` | | |_  | |/ _ \ \ /\ / /   \ \ \ \ \ \
 | |_| | (_| | || (_| | |  _| | | (_) \ V  V /    / / / / / /
 |____/ \__,_|\__\__,_| |_|   |_|\___/ \_/\_/    /_/_/_/_/_/


Welcome to the Spring Cloud Data Flow shell. For assistance hit TAB or type "help".
server-unknown:&gt;</pre><pre class="screen">server-unknown:&gt;dataflow config server http://dataflow-server.app.io
Successfully targeted http://dataflow-server.app.io
dataflow:&gt;</pre><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">Running instance of <code class="literal">cassandra</code> in Cloud Foundry or from another Cloud provider</li><li class="listitem" epub:type="list-item">A database utility tool such as <a class="link" href="http://dbeaver.jkiss.org/" target="_top">DBeaver</a> to connect to the Cassandra instance. You might have to provide <code class="literal">host</code>, <code class="literal">port</code>, <code class="literal">username</code> and <code class="literal">password</code> depending on the Cassandra configuration you are using.</li><li class="listitem" epub:type="list-item"><p class="simpara">Create a <code class="literal">book</code> table in your Cassandra keyspace using:</p><pre class="screen">CREATE TABLE book  (
    id          uuid PRIMARY KEY,
    isbn        text,
    author      text,
    title       text
);</pre></li></ul></div></li><li class="listitem" epub:type="list-item"><p class="simpara"><a class="link" href="https://github.com/spring-cloud/spring-cloud-dataflow/blob/master/spring-cloud-dataflow-docs/src/main/asciidoc/streams.adoc#register-a-stream-app" target="_top">Register</a> the out-of-the-box applications for the Rabbit binder</p><div class="note" title="Note" epub:type="notice"><table style="border: 0; "><tr><td style="text-align: center; vertical-align: top; width: 25; " rowspan="2"><img alt="[Note]" src="images/note.png"/></td><th style="text-align: left; ">Note</th></tr><tr><td style="text-align: left; vertical-align: top; "><p>These samples assume that the Data Flow Server can access a remote Maven repository, <code class="literal"><a class="link" href="https://repo.spring.io/libs-release" target="_top">repo.spring.io/libs-release</a></code> by default. If your Data Flow server is running behind a firewall, or you are using a maven proxy preventing
access to public repositories, you will need to install the sample apps in your internal Maven repository and <a class="link" href="https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#getting-started-maven-configuration" target="_top">configure</a>
the server accordingly.  The sample applications are typically registered using Data Flow’s bulk import facility. For example, the Shell command <code class="literal">dataflow:&gt;app import --uri <a class="link" href="http://bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven" target="_top">bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven</a></code> (The actual URI is release and binder specific so refer to the sample instructions for the actual URL).
The bulk import URI references a plain text file containing entries for all of the publicly available Spring Cloud Stream and Task applications published to <code class="literal"><a class="link" href="https://repo.spring.io" target="_top">repo.spring.io</a></code>. For example,
<code class="literal">source.http=maven://org.springframework.cloud.stream.app:http-source-rabbit:1.2.0.RELEASE</code> registers the <code class="literal">http</code> source app at the corresponding Maven address, relative to the remote repository(ies) configured for the
Data Flow server. The format is <code class="literal">maven://&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;</code>  You will need to <a class="link" href="https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Bacon.RELEASE/spring-cloud-stream-app-descriptor-Bacon.RELEASE.rabbit-apps-maven-repo-url.properties" target="_top">download</a> the required apps or <a class="link" href="https://github.com/spring-cloud-stream-app-starters" target="_top">build</a> them and then install them in your Maven repository, using whatever group, artifact, and version you choose. If you do
this, register individual apps using <code class="literal">dataflow:&gt;app register…​</code> using the <code class="literal">maven://</code> resource URI format corresponding to your installed app.</p></td></tr></table></div><pre class="screen">dataflow:&gt;app import --uri http://bit.ly/Bacon-RELEASE-stream-applications-rabbit-maven</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Create the stream</p><pre class="screen">dataflow:&gt;stream create cassandrastream --definition "http --spring.cloud.stream.bindings.output.contentType='application/json' | cassandra --ingestQuery='insert into book (id, isbn, title, author) values (uuid(), ?, ?, ?)' --username='&lt;USERNAME&gt;' --password='&lt;PASSWORD&gt;' --port=&lt;PORT&gt; --contact-points=&lt;HOST&gt; --keyspace='&lt;KEYSPACE&gt;'" --deploy

Created and deployed new stream 'cassandrastream'</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Verify the stream is successfully deployed</p><pre class="screen">dataflow:&gt;stream list</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Notice that <code class="literal">cassandrastream-http</code> and <code class="literal">cassandrastream-cassandra</code> <a class="link" href="https://github.com/spring-cloud-stream-app-starters/" target="_top">Spring Cloud Stream</a> applications are running as <span class="emphasis"><em>cloud-native</em></span> (microservice) applications in Cloud Foundry</p><pre class="screen">$ cf apps
Getting apps in org [your-org] / space [your-space] as user...
OK

name                        requested state   instances   memory   disk   urls
cassandrastream-cassandra   started           1/1         1G       1G     cassandrastream-cassandra.app.io
cassandrastream-http        started           1/1         1G       1G     cassandrastream-http.app.io
dataflow-server             started           1/1         1G       1G     dataflow-server.app.io</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Lookup the <code class="literal">url</code> for <code class="literal">cassandrastream-http</code> application from the list above. Post sample data pointing to the <code class="literal">http</code> endpoint: <code class="literal">&lt;YOUR-cassandrastream-http-APP-URL&gt;</code></p><pre class="screen">http post --contentType 'application/json' --data '{"isbn": "1599869772", "title": "The Art of War", "author": "Sun Tzu"}' --target http://&lt;YOUR-cassandrastream-http-APP-URL&gt;
&gt; POST (application/json;charset=UTF-8) http://cassandrastream-http.app.io {"isbn": "1599869772", "title": "The Art of War", "author": "Sun Tzu"}
&gt; 202 ACCEPTED</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Connect to the Cassandra instance and query the table <code class="literal">book</code> to list the data inserted</p><pre class="screen">select * from book;</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Now, let’s try to take advantage of Pivotal Cloud Foundry’s platform capability. Let’s scale the <code class="literal">cassandrastream-http</code> application from 1 to 3 instances</p><pre class="screen">$ cf scale cassandrastream-http -i 3
Scaling app cassandrastream-http in org user-dataflow / space development as user...
OK</pre></li><li class="listitem" epub:type="list-item"><p class="simpara">Verify App instances (3/3) running successfully</p><pre class="screen">$ cf apps
Getting apps in org user-dataflow / space development as user...
OK

name                        requested state   instances   memory   disk   urls
cassandrastream-cassandra   started           1/1         1G       1G     cassandrastream-cassandra.app.io
cassandrastream-http        started           3/3         1G       1G     cassandrastream-http.app.io
dataflow-server             started           1/1         1G       1G     dataflow-server.app.io</pre></li><li class="listitem" epub:type="list-item">You’re done!</li></ol></div></section></section><section class="section" title="Summary" epub:type="division" id="_summary"><div class="titlepage"><div><div><h4 class="title">Summary</h4></div></div></div><p>In this sample, you have learned:</p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">How to use Spring Cloud Data Flow’s <code class="literal">Local</code> and <code class="literal">Cloud Foundry</code> servers</li><li class="listitem" epub:type="list-item">How to use Spring Cloud Data Flow’s <code class="literal">shell</code></li><li class="listitem" epub:type="list-item">How to create streaming data pipeline to connect and write to <code class="literal">Cassandra</code></li><li class="listitem" epub:type="list-item">How to scale data microservice applications on <code class="literal">Pivotal Cloud Foundry</code></li></ul></div></section></section></section></section><footer/></body></html>